// This ends up pointing to a CJS version of the ES module generated by wasm-pack
// which is done post-compile via rollup
/*const {
    isSignatureParamsValid, bbsSignatureParamsMaxSupportedMsgs, isSignatureParamsValid, bbsSignatureParamsMaxSupportedMsgs,
    generateSignatureParams, generateSignatureParams, generateBBSKeyPair, generateBBSKeyPair,
    generatePSSigningKey, generateBBSPublicKey, generateBBSPublicKey, isBBSPublicKeyValid, isBBSPublicKeyValid,
    bbsEncodeMessageForSigning, bbsEncodeMessagesForSigning, bbsGetBasesForCommitment, bbsGetBasesForCommitment,
    bbsSign, bbsVerify, bbsCommitMsgsIn, bbsBlindSign, bbsUnblindSig,
    bbsSign, bbsVerify, bbsCommitMsgsIn, bbsBlindSign, bbsUnblindSig,
    bbsInitializeProofOfKnowledgeOfSignature, bbsVerifyProofOfKnowledgeOfSignature, bbsGenProofOfKnowledgeOfSignature,
    bbsAdaptSigParamsForMsgCount, bbsExtendSigParams2ForMsgCount, bbsChallengeContributionFromProof, bbsChallengeContributionFromProtocol,
} = require("./index");*/

const {
    wasm, requireWasmInitialized
} = require('./init_wasm');

const withWasmInitialized = fn => {
    const wrapped = function() {
        requireWasmInitialized();
        fn.apply(this, arguments)
    };

    try {
        mimic(wrapped, fn)
    } finally {
        return wrapped
    }
}

function ensurePositiveInteger(num) {
    if (!Number.isInteger(num) || num < 0) {
        throw new Error(`Need a positive integer but found ${num} `);
    }
}

module.exports.DEFAULT_BLS12381_PRIVATE_KEY_LENGTH = 32;

module.exports.DEFAULT_BLS12381__PUBLIC_KEY_LENGTH = 48;

module.exports.DEFAULT_BLS12381__PUBLIC_KEY_LENGTH = 96;

module.exports.PS_SIGNATURE_LENGTH = 112;

console.log(wasm)

module.exports.generatePSSigningKey = (seed) => {
    requireWasmInitialized();
    return wasm.generatePSSigningKey(seed);
};

module.exports.generateSignatureParams = (messageCount, label) => {
    requireWasmInitialized();
    ensurePositiveInteger(messageCount);
    return wasm.generateSignatureParams(messageCount, label);
};

module.exports.isSignatureParamsValid = (params) => {
    requireWasmInitialized();
    return wasm.isSignatureParamsValid(params);
};

module.exports.bbsSignatureParamsMaxSupportedMsgs = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsMaxSupportedMsgs(params);
};

module.exports.generateSignatureParams = (messageCount, label) => {
    requireWasmInitialized();
    ensurePositiveInteger(messageCount);
    return wasm.generateSignatureParams(messageCount, label);
};

module.exports.isSignatureParamsValid = (params) => {
    requireWasmInitialized();
    return wasm.isSignatureParamsValid(params);
};

module.exports.bbsSignatureParamsMaxSupportedMsgs = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsMaxSupportedMsgs(params);
};

module.exports.bbsSignatureParamsToBytes = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsToBytes(params);
};

module.exports.bbsSignatureParamsFromBytes = (bytes) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsFromBytes(bytes);
};

module.exports.bbsSignatureParamsToBytes = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsToBytes(params);
};

module.exports.bbsSignatureParamsFromBytes = (bytes) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsFromBytes(bytes);
};

module.exports.generateBBSPublicKey = (secretKey, params) => {
    requireWasmInitialized();
    return wasm.generateBBSPublicKey(secretKey, params);
};

module.exports.isBBSPublicKeyValid = (publicKey) => {
    requireWasmInitialized();
    return wasm.isBBSPublicKeyValid(publicKey);
};

module.exports.generateBBSPublicKey = (secretKey, params) => {
    requireWasmInitialized();
    return wasm.generateBBSPublicKey(secretKey, params);
};

module.exports.isBBSPublicKeyValid = (publicKey) => {
    requireWasmInitialized();
    return wasm.isBBSPublicKeyValid(publicKey);
};

module.exports.generateBBSKeyPair = (params, seed) => {
    requireWasmInitialized();
    return wasm.generateBBSKeyPair(params, seed);
};

module.exports.generateBBSKeyPair = (params, seed) => {
    requireWasmInitialized();
    return wasm.generateBBSKeyPair(params, seed);
};

module.exports.bbsEncodeMessageForSigning = (message) => {
    requireWasmInitialized();
    return wasm.bbsEncodeMessageForSigning(message);
};

module.exports.bbsEncodeMessagesForSigning = (messages, indicesToEncode) => {
    requireWasmInitialized();
    return wasm.bbsEncodeMessagesForSigning(messages, indicesToEncode);
};

module.exports.bbsGetBasesForCommitment = (params, indicesToCommit) => {
    requireWasmInitialized();
    return wasm.bbsGetBasesForCommitment(params, indicesToCommit);
};

module.exports.bbsGetBasesForCommitment = (params, indicesToCommit) => {
    requireWasmInitialized();
    return wasm.bbsGetBasesForCommitment(params, indicesToCommit);
};

module.exports.bbsSign = (
    messages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsSign(messages, secretKey, params, encodeMessages);
};

module.exports.bbsSign = (
    messages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsSign(messages, secretKey, params, encodeMessages);
};

module.exports.bbsVerify = (
    messages,
    signature,
    publicKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsVerify(messages, signature, publicKey, params, encodeMessages);
};

module.exports.bbsVerify = (
    messages,
    signature,
    publicKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsVerify(messages, signature, publicKey, params, encodeMessages);
};

module.exports.bbsCommitMsgsIn = (
    messages,
    blinding,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsCommitMsgsIn(messages, blinding, params, encodeMessages);
};

module.exports.bbsCommitMsgsIn = (
    messages,
    blinding,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsCommitMsgsIn(messages, blinding, params, encodeMessages);
};

module.exports.bbsBlindSign = (
    commitment,
    uncommittedMessages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsBlindSign(commitment, uncommittedMessages, secretKey, params, encodeMessages);
};

module.exports.bbsBlindSign = (
    commitment,
    uncommittedMessages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsBlindSign(commitment, uncommittedMessages, secretKey, params, encodeMessages);
};

module.exports.bbsUnblindSig = (
    signature,
    blinding,
) => {
    requireWasmInitialized();
    return wasm.bbsUnblindSig(signature, blinding);
};

module.exports.bbsUnblindSig = (
    signature,
    blinding,
) => {
    requireWasmInitialized();
    return wasm.bbsUnblindSig(signature, blinding);
};

module.exports.bbsInitializeProofOfKnowledgeOfSignature = (
    signature,
    params,
    messages,
    blindings,
    revealedIndices,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsInitializeProofOfKnowledgeOfSignature(signature, params, messages, blindings, revealedIndices, encodeMessages);
};

module.exports.bbsGenProofOfKnowledgeOfSignature = (
    protocol,
    challenge
) => {
    requireWasmInitialized();
    return wasm.bbsGenProofOfKnowledgeOfSignature(protocol, challenge);
};

module.exports.bbsVerifyProofOfKnowledgeOfSignature = (
    proof,
    revealedMessages,
    challenge,
    publicKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsVerifyProofOfKnowledgeOfSignature(proof, revealedMessages, challenge, publicKey, params, encodeMessages);
};

module.exports.bbsChallengeContributionFromProtocol = (
    protocol,
    revealedMessages,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsChallengeContributionFromProtocol(protocol, revealedMessages, params, encodeMessages);
};

module.exports.bbsChallengeContributionFromProof = (
    proof,
    revealedMessages,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsChallengeContributionFromProof(proof, revealedMessages, params, encodeMessages);
};

module.exports.bbsAdaptSigParamsForMsgCount = (params, generating_label, new_count) => {
    requireWasmInitialized();
    return wasm.bbsAdaptSigParamsForMsgCount(params, generating_label, new_count);
};

module.exports.bbsAdaptSigParamsForMsgCount = (params, generating_label, new_count) => {
    requireWasmInitialized();
    return wasm.bbsAdaptSigParamsForMsgCount(params, generating_label, new_count);
};
