// This ends up pointing to a CJS version of the ES module generated by wasm-pack
// which is done post-compile via rollup
/*const {
    generatePoKBBSSignatureStatement, generateAccumulatorMembershipStatement,
    generateAccumulatorNonMembershipStatement, generatePedersenCommitmentStatement, generateWitnessEqualityMetaStatement,
    generatePoKBBSSignatureWitness, generateAccumulatorMembershipWitness, generateAccumulatorNonMembershipWitness,
    generatePedersenCommitmentWitness, generateProofSpecG1, generateCompositeProof, verifyCompositeProof
} = require("./index");*/

const {
    wasm, requireWasmInitialized
} = require('./init_wasm');

module.exports.generatePoKBBSSignatureStatement = (params, publicKey, revealedMessages, encodeMessages) => {
    requireWasmInitialized();
    return wasm.generatePoKBBSSignatureStatement(params, publicKey, revealedMessages, encodeMessages);
};

module.exports.generateAccumulatorMembershipStatement = (params, publicKey, provingKey, accumulated) => {
    requireWasmInitialized();
    return wasm.generateAccumulatorMembershipStatement(params, publicKey, provingKey, accumulated);
};

module.exports.generateAccumulatorNonMembershipStatement = (params, publicKey, provingKey, accumulated) => {
    requireWasmInitialized();
    return wasm.generateAccumulatorNonMembershipStatement(params, publicKey, provingKey, accumulated);
};

module.exports.generatePedersenCommitmentG1Statement = (bases, commitment) => {
    requireWasmInitialized();
    return wasm.generatePedersenCommitmentG1Statement(bases, commitment);
};

module.exports.generatePedersenCommitmentG2Statement = (bases, commitment) => {
    requireWasmInitialized();
    return wasm.generatePedersenCommitmentG2Statement(bases, commitment);
};

module.exports.generateWitnessEqualityMetaStatement = (equalities) => {
    requireWasmInitialized();
    return wasm.generateWitnessEqualityMetaStatement(equalities);
};

module.exports.generatePoKBBSSignatureWitness = (signature, unrevealedMessages, encodeMessages) => {
    requireWasmInitialized();
    return wasm.generatePoKBBSSignatureWitness(signature, unrevealedMessages, encodeMessages);
};

module.exports.generateAccumulatorMembershipWitness = (element, witness) => {
    requireWasmInitialized();
    return wasm.generateAccumulatorMembershipWitness(element, witness);
};

module.exports.generateAccumulatorNonMembershipWitness = (element, witness) => {
    requireWasmInitialized();
    return wasm.generateAccumulatorNonMembershipWitness(element, witness);
};

module.exports.generatePedersenCommitmentWitness = (elements) => {
    requireWasmInitialized();
    return wasm.generatePedersenCommitmentWitness(elements);
};

module.exports.generateProofSpecG1 = (statements, metaStatements, context) => {
    requireWasmInitialized();
    return wasm.generateProofSpecG1(statements, metaStatements, context);
};

module.exports.generateProofSpecG2 = (statements, metaStatements, context) => {
    requireWasmInitialized();
    return wasm.generateProofSpecG2(statements, metaStatements, context);
};

module.exports.generateCompositeProofG1 = (proofSpec, witnesses, nonce) => {
    requireWasmInitialized();
    return wasm.generateCompositeProofG1(proofSpec, witnesses, nonce);
};

module.exports.generateCompositeProofG2 = (proofSpec, witnesses, nonce) => {
    requireWasmInitialized();
    return wasm.generateCompositeProofG2(proofSpec, witnesses, nonce);
};

module.exports.verifyCompositeProofG1 = (proof, proofSpec, nonce) => {
    requireWasmInitialized();
    return wasm.verifyCompositeProofG1(proof, proofSpec, nonce);
};

module.exports.verifyCompositeProofG2 = (proof, proofSpec, nonce) => {
    requireWasmInitialized();
    return wasm.verifyCompositeProofG2(proof, proofSpec, nonce);
};
