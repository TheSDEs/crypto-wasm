const {
    wasm, requireWasmInitialized
} = require('./init_wasm');

// This ends up pointing to a CJS version of the ES module generated by wasm-pack
// which is done post-compile via rollup

module.exports.generateRandomFieldElement = (seed) => {
    requireWasmInitialized();
    return wasm.generateRandomFieldElement(seed);
};

module.exports.generateRandomG1Element = (seed) => {
    requireWasmInitialized();
    return wasm.generateRandomG1Element(seed);
};

module.exports.encodeMessageForSigning = (message) => {
    requireWasmInitialized();
    return wasm.encodeMessageForSigning(message);
};

module.exports.encodeMessagesForSigning = (messages, indicesToEncode) => {
    requireWasmInitialized();
    return wasm.encodeMessagesForSigning(messages, indicesToEncode);
};

module.exports.encodeMessageForSigningInConstantTime = (message) => {
    requireWasmInitialized();
    return wasm.encodeMessageForSigningInConstantTime(message);
};

module.exports.encodeMessagesForSigningInConstantTime = (messages, indicesToEncode) => {
    requireWasmInitialized();
    return wasm.encodeMessagesForSigningInConstantTime(messages, indicesToEncode);
};

module.exports.generateRandomG2Element = (seed) => {
    requireWasmInitialized();
    return wasm.generateRandomG2Element(seed);
};

module.exports.generateFieldElementFromBytes = (bytes) => {
    requireWasmInitialized();
    return wasm.generateFieldElementFromBytes(bytes);
};

module.exports.fieldElementAsBytes = (element, elementIsSecure) => {
    requireWasmInitialized();
    return wasm.fieldElementAsBytes(element, elementIsSecure);
};

module.exports.generateChallengeFromBytes = (bytes) => {
    requireWasmInitialized();
    return wasm.generateChallengeFromBytes(bytes);
};

module.exports.generateFieldElementFromNumber = (num) => {
    requireWasmInitialized();
    return wasm.generateFieldElementFromNumber(num);
};

module.exports.pedersenCommitmentG1 = (bases, messages) => {
    requireWasmInitialized();
    return wasm.pedersenCommitmentG1(bases, messages);
};

module.exports.pedersenCommitmentG2 = (bases, messages) => {
    requireWasmInitialized();
    return wasm.pedersenCommitmentG2(bases, messages);
};

module.exports.generatePedersenCommKeyG1 = (label, returnUncompressed) => {
    requireWasmInitialized();
    return wasm.generatePedersenCommKeyG1(label, returnUncompressed);
};

module.exports.decompressPedersenCommKeyG1 = (commKey) => {
    requireWasmInitialized();
    return wasm.decompressPedersenCommKeyG1(commKey);
};